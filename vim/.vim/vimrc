syntax on                   " enable syntax highlighting
filetype plugin indent on   " allow file type specific options
set number                  " turn on line numbers
set laststatus=2            " always show status line (even with only single window)
set wildmenu                " visual autocomplete for commands
set noshowmatch             " stop brief jump on highlight match
set tabstop=4               " tab width is 4 spaces
set shiftwidth=4            " indent also with 4 spaces
set bs=indent,eol,start     " make my backspace work again!
set splitbelow              " horizontal splits
set splitright              " vertical splits
"set spell                   " turn spellcheck on
set nowrap                  " hate line wrapping
"set formatoptions-=cro      " stop continuing comments
"set iskeyword-=_            " ease of mobility using lower_case_snake_case
set clipboard=unnamedplus   " use with +clipboard feature
set shortmess-=S            " show search count message
set incsearch               " move cursor to matched string, while typing the search pattern
set autochdir				" change directory to file

" use jk to enter normal mode from insert mode 
inoremap jk <ESC>l

" use shift+enter to prevent comments from continuing on next line
inoremap <S-CR> <CR><ESC>^Da

" remove newbie crutches
for key in ['<Down>', '<Left>', '<Right>', '<Up>']
    exec 'noremap' key '<Nop>'
    exec 'noremap!' key '<Nop>'
endfor

" command to export to pdf
command Pdf hardcopy > %.ps | !ps2pdf %.ps && rm %.ps

" Turn on spell check for certain filetypes
augroup spellcheck
	autocmd!
	autocmd FileType text,markdown,gitcommit setlocal spell
	autocmd BufRead,BufNewFile TODO setlocal spell
augroup END

function VerticalRuler()
	" vertical ruler for 120 characters per line
	augroup BgHighlight
		autocmd!
		autocmd WinEnter,BufWinEnter *
					\ if get(getwininfo(win_getid())[0], 'terminal') != '1'
					\ | setlocal colorcolumn=120
					\ | endif	                                                    " don't show for terminal
		autocmd WinLeave,TerminalOpen * setlocal colorcolumn=0                      " only one color column shown at a time
	augroup END
	" set color of vertical ruler
	highlight ColorColumn ctermbg=black
endfunction
"call VerticalRuler()

colorscheme tender
" make transparent
highlight Normal ctermbg=None
" override color of line numbers
highlight LineNr ctermfg=242
" override color of comments
highlight Comment ctermfg=244

" set colors for the status line
" 238 to remove the annoying singular column between vertical breaks
" 235 to "hide" the status line in terminal mode
highlight StatusLine ctermbg=238
highlight StatusLineTerm ctermbg=235
highlight StatusLineTermNC ctermbg=235

highlight User1 ctermbg=darkgrey
highlight User2 ctermbg=None
highlight User3 ctermbg=grey ctermfg=black
highlight User4 ctermbg=green ctermfg=black
highlight User5 ctermbg=blue ctermfg=black
highlight User6 ctermbg=magenta ctermfg=black
highlight User7 ctermbg=yellow ctermfg=black
highlight User8 ctermbg=red ctermfg=black

" many more than this, should be adding when encountered    
let s:modes = {
            \ 'n'       :  ['%4*', 'NORMAL'], 
            \ 'i'       :  ['%5*', 'INSERT'],
            \ 'v'       :  ['%6*', 'VISUAL'],
            \ 'V'       :  ['%6*', 'V-LINE'],
            \ "\<C-V>"  :  ['%6*', 'VBLOCK'],
            \ 'R'       :  ['%7*', 'REPLCE'],
            \ 'c'       :  ['%8*', 'COMMND'],
            \}

let s:default = ['%*' , '      ']

function GetColorAndMode()
    let l:colorAndMode = ""
    let l:colorAndMode ..= get(s:modes, mode(), s:default)[0]                 " set appropriate color for the current mode
    let l:colorAndMode ..= " " .. get(s:modes, mode(), s:default)[1] .. " "   " set text to current mode
    return l:colorAndMode
endfunction

function MyStatusLine()
    let l:statusline = ""                                                     " begin building the status line
    let l:focused = g:statusline_winid == win_getid()                         " is current window in focus

    if l:focused
        let l:statusline ..= GetColorAndMode()                                " show current mode in different colors
        let l:statusline ..= "%1* "                                           " set color for filename (focused window only)
    endif

    if l:focused
        let l:statusline ..= "%t "											   " display full path and the filename
    else
        let l:statusline ..= "%F"											   " display full path and the filename
    endif

	let l:statusline ..= "%2* "                                               " preserve smoothness of statuslinenc
    let l:statusline ..= "%{&spell == 0? '' : '[Spell]'}"				      " spellcheck flag
    let l:statusline ..= "%h%w%m%r"										      " help, preview, modified, and read only flag

    if l:focused
        let l:statusline ..= "%="											  " right align everything else now
        "let l:statusline ..= "%{&fileformat} | "							  " file format with | separator
        "let l:statusline ..= "%{&fileencoding? &fileencoding : &encoding} | " " file encoding with | separator
        "let l:statusline ..= "%{&filetype == ''? 'no\ ft' : &filetype} "	  " file type (no ft is displayed if none)
        let l:statusline ..= "%1* %3p%% "                                     " percentage way through file 
        let l:statusline ..= "%3* %4l:%-3v"                                   " line number followed by virtual column number
    endif

    let l:statusline ..= "%*"                                                 " set rest of statusline to background

    return l:statusline
endfunction

function TerminalStatusLine()
    let l:statusline = ""
    let l:focused = g:statusline_winid == win_getid(winnr())                  " is current window in focus
    if l:focused
        let l:statusline ..= GetColorAndMode()                                " show current mode in different color
    endif
    let l:statusline ..= "%*"                                                 " set rest of statusline to background
    return l:statusline
endfunction

augroup statusline
    " remove all autocommands from statusline group
    autocmd!                               
    autocmd CmdlineEnter * redrawstatus             " redraw status line when entering command mode
    autocmd TerminalWinOpen * setlocal statusline=%!TerminalStatusLine()
augroup END

set noshowmode                             " mode already displayed in status line
set statusline=%!MyStatusLine()            " create the status line
